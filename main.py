# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'emp_mana.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.Qt import QTableWidgetItem, QAbstractItemView, QTableView
import db


class UiMainWindow(object):
    # pep8
    # UPLOAD_DATA
    def load_Data(self):
        """
            Return list Employee_mana
        """
        #this for communicate to the db, IT MUST NOT BELONG HERE
        query = "SELECT * FROM Employee_mana"
        result = db.conn.execute(query).fetchall()
        #THIS FOR RENDER THE UI
        self.tableWidget.setRowCount(0)
        for _count, row_data in enumerate(result[::-1]):
            print(_count)
            print(row_data)
            self.tableWidget.insertRow(_count)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(_count, column_number, QtWidgets.QTableWidgetItem(str(data)))
    # ADD_EMP
    def add_Emp(self):
        """
            Add Emp
        """
        question = QMessageBox.question(MainWindow, "Question Message", "Do you want to add this employee?", 
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        MainWindow.show()
        #CHECK QUESTION ADD EMPLOYEE
        if(question == QMessageBox.Yes):
            name = self.name_input.text()
            age = int(self.age_input.text())
            department = self.comboBox_dept.currentText()
            role = self.comboBox_role.currentText()
            
            if name.strip() and age>0:
                db.insert_employee(name , age , department , role)
                self.load_Data()
                self.reset_method_emp()
                self.notice_success()
                self.btn_remove.setEnabled(False)
                self.btn_update.setEnabled(False)
            else:
                self.notice_fail()
    # DELETE_EMP
    def delete_Emp(self):
        """
            Delete Emp
        """
        question = QMessageBox.question(MainWindow, "Question Message", "Do you want to delete this employee?", 
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        
        MainWindow.show()
        #CHECK QUESTION DELETE EMPLOYEE
        if(question == QMessageBox.Yes):
            row = self.tableWidget.currentRow()
            current_emp = self.tableWidget.item(row, 0).text()

            query = "SELECT * FROM Employee_mana"
            delete = f"DELETE FROM Employee_mana WHERE id={current_emp}"
            
            query_emp = db.conn.execute(query).fetchall()
            delete_emp = db.cur.execute(delete)
            db.conn.commit()

            self.load_Data()
            self.tableWidget.removeRow(row)
            self.notice_success()
            self.btn_remove.setEnabled(False)
            self.btn_update.setEnabled(False)
    # UPDATE_EMP    
    def update_Emp(self):
        """
            Update Info Emp
        """

        name = self.name_input.text()
        age = int(self.age_input.text())
        department = self.comboBox_dept.currentText()
        role = self.comboBox_role.currentText()

        question = QMessageBox.question(MainWindow, "Question Message", "Do you want to update info this employee?", 
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        
        MainWindow.show()
        #CHECK QUESTION UPDATE EMPLOYEE
        if(question == QMessageBox.Yes):
            if name.strip() and age>0:
                row = self.tableWidget.currentRow()
                current_emp = self.tableWidget.item(row, 0).text()
                query = "SELECT * FROM Employee_mana"
                update = """
                    UPDATE Employee_mana 
                    SET 
                        Name='{name}',
                        Age={age},
                        Department='{department}',
                        ROLE='{role}' 
                    WHERE id={current_emp}
                    """.format(
                    name=name,
                    age=age,
                    department=department,
                    role=role,
                    current_emp=current_emp
                    )
               
                query_emp = db.conn.execute(query).fetchall()
                update_emp = db.cur.execute(update)
                db.conn.commit()

                self.load_Data()
                self.reset_method_emp()
                self.notice_success()
                self.btn_remove.setEnabled(False)
                self.btn_update.setEnabled(False)
            else:
                self.notice_fail()   
    # NOTICE_SUCCESS
    def notice_success(self):
        msg = QMessageBox()
        msg.setWindowTitle("Notice")
        msg.setText("Successfull!")
        x = msg.exec_()
    # NOTICE_FAILED
    def notice_fail(self):
        msg = QMessageBox()
        msg.setWindowTitle("Notice")
        msg.setText("Failed!")
        x = msg.exec_()
    # FOCUS_OUT_TABLE
    def focus_out_table(self, ev):
        if MainWindow.hasFocus() :
            self.tableWidget.clearSelection()
            self.btn_remove.setEnabled(False)
            self.btn_update.setEnabled(False)
        else:
            self.btn_update.setEnabled(True)
            self.btn_remove.setEnabled(True)
    # FOCUS_IN_TABLE
    def focus_in_table(self, ev):
        self.show_method_emp()

        self.btn_update.setEnabled(True)
        self.btn_remove.setEnabled(True)
    # FOCUS_NONE
    def focus_window(self, ev):
        if MainWindow.hasFocus():
            self.tableWidget.clearSelection()
            self.btn_remove.setEnabled(False)
            self.btn_update.setEnabled(False)
    # SHOW_METHOD_EMP
    def show_method_emp(self):
        row = self.tableWidget.currentRow()
        current_emp = self.tableWidget.item(row, 0).text()

        show = f"SELECT * FROM Employee_mana WHERE id={current_emp}"
        show_emp = db.cur.execute(show).fetchall()

        self.name_input.setText(show_emp[0][1])
        self.age_input.setValue(show_emp[0][2])
        self.comboBox_dept.setCurrentText(show_emp[0][3])
        self.comboBox_role.setCurrentText(show_emp[0][4])
    # RESET_METHOD_EMP
    def reset_method_emp(self):
        self.name_input.setText("")
        self.age_input.setValue(0)
        self.comboBox_dept.setCurrentText("Software")
        self.comboBox_role.setCurrentText("SE")

        """
        docstring
        """
        self.tableWidget.rowCount()
    # SETUP_UI
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(544, 600)
        # SET FONT
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)

        MainWindow.setFont(font)
        MainWindow.setFocusPolicy(QtCore.Qt.ClickFocus)
        MainWindow.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        MainWindow.setAcceptDrops(True)
        MainWindow.setToolTipDuration(0)
        # FOCUS_NONE
        MainWindow.focusInEvent = self.focus_window
        
        # CENTRAL_WIDGET
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # NAME_INPUT
        self.name_input = QtWidgets.QLineEdit(self.centralwidget)
        self.name_input.setGeometry(QtCore.QRect(140, 340, 101, 21))
        self.name_input.setText("")
        self.name_input.setObjectName("name_input")

        # AGE_INPUT
        self.age_input = QtWidgets.QSpinBox(self.centralwidget)
        self.age_input.setGeometry(QtCore.QRect(340, 340, 71, 21))
        self.age_input.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.age_input.setObjectName("age_input")


        # BUTTON: Remove, Update, Add
        self.btn_remove = QtWidgets.QPushButton(self.centralwidget)
        self.btn_remove.setGeometry(QtCore.QRect(140, 480, 71, 23))
        self.btn_remove.setObjectName("btn_remove")
        self.btn_remove.setEnabled(False)
        self.btn_remove.clicked.connect(self.delete_Emp)
        # self.btn_remove.clicked.connect(self.focus_in_table)

        self.btn_update = QtWidgets.QPushButton(self.centralwidget)
        self.btn_update.setGeometry(QtCore.QRect(240, 480, 71, 23))
        self.btn_update.setObjectName("btn_update")
        self.btn_update.setEnabled(False)
        self.btn_update.clicked.connect(self.update_Emp)

        self.btn_add = QtWidgets.QPushButton(self.centralwidget)
        self.btn_add.setGeometry(QtCore.QRect(340, 480, 71, 23))
        self.btn_add.setObjectName("btn_add")
        self.btn_add.clicked.connect(self.add_Emp)


        # LABEL
        # Label_age 
        self.label_age = QtWidgets.QLabel(self.centralwidget)
        self.label_age.setGeometry(QtCore.QRect(290, 340, 31, 16))

        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)

        self.label_age.setFont(font)
        self.label_age.setObjectName("label_age")

        # Label_name
        self.label_name = QtWidgets.QLabel(self.centralwidget)
        self.label_name.setGeometry(QtCore.QRect(80, 340, 41, 20))

        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.label_name.setFont(font)
        self.label_name.setObjectName("label_name") 
 
        
        # DROPDOWN_DEPARTMENT, LABEL_DEPT
        self.comboBox_dept = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_dept.setGeometry(QtCore.QRect(140, 400, 101, 22))
        self.comboBox_dept.setObjectName("comboBox_dept")
        
        self.comboBox_dept.addItem("")
        self.comboBox_dept.addItem("")
        self.comboBox_dept.addItem("")
        self.comboBox_dept.addItem("")

        self.label_dept = QtWidgets.QLabel(self.centralwidget)
        self.label_dept.setGeometry(QtCore.QRect(40, 400, 81, 20))
        
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.label_dept.setFont(font)
        self.label_dept.setObjectName("label_dept")

        # DROPDOWN_ROLE, LABEL_ROLE
        self.comboBox_role = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_role.setGeometry(QtCore.QRect(340, 400, 71, 22))
        self.comboBox_role.setObjectName("comboBox_role")

        self.comboBox_role.addItem("")
        self.comboBox_role.addItem("")
        self.comboBox_role.addItem("")
        self.comboBox_role.addItem("")

        self.label_role = QtWidgets.QLabel(self.centralwidget)
        self.label_role.setGeometry(QtCore.QRect(290, 400, 41, 20))

        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.label_role.setFont(font)
        self.label_role.setObjectName("label_role")

        # GROUPBOX
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(30, 110, 471, 161))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")

        # TABLE_EMP
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_2)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 471, 161))
        self.tableWidget.setToolTipDuration(-5)
        self.tableWidget.setRowCount(10)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.horizontalHeader().setStyleSheet("font-weight: bold;")
        self.tableWidget.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignLeft)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        self.tableWidget.verticalHeader().sectionClicked.connect(self.focus_in_table)
        self.tableWidget.setAutoScroll(False)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
       
        # SELECT ROW WHEN CLICK ITEM
        self.tableWidget.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.tableWidget.setSelectionBehavior(QTableView.SelectRows)
        self.tableWidget.clicked.connect(self.focus_in_table)

        # SELECT ROW WHEN NON CLICK ITEM

        self.tableWidget.focusOutEvent = self.focus_out_table
        
        #LABEL_NAME_APP
        self.label_name_app = QtWidgets.QLabel(self.centralwidget)
        self.label_name_app.setGeometry(QtCore.QRect(100, 60, 341, 31))

        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(24)
        font.setBold(False)
        font.setWeight(50)

        self.label_name_app.setFont(font)
        self.label_name_app.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_name_app.setStyleSheet("gridline-color: qconicalgradient(cx:0.5, cy:0.5, angle:0, stop:0 rgba(255, 255, 255, 255), stop:0.373979 rgba(255, 255, 255, 255), stop:0.373991 rgba(33, 30, 255, 255), stop:0.624018 rgba(33, 30, 255, 255), stop:0.624043 rgba(255, 0, 0, 255), stop:1 rgba(255, 0, 0, 255));")
        self.label_name_app.setObjectName("label_name_app")
        
        # STATUS_BAR
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    # RETRANSLATE_UI
    def retranslateUi(self, MainWindow):
        """
            retranslateUi
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Employee Maagement"))

        self.comboBox_dept.setItemText(0, _translate("MainWindow", "Software"))
        self.comboBox_dept.setItemText(1, _translate("MainWindow", "Network"))
        self.comboBox_dept.setItemText(2, _translate("MainWindow", "Data"))
        self.comboBox_dept.setItemText(3, _translate("MainWindow", "Support"))

        self.comboBox_role.setItemText(0, _translate("MainWindow", "SE"))
        self.comboBox_role.setItemText(1, _translate("MainWindow", "NE"))
        self.comboBox_role.setItemText(2, _translate("MainWindow", "DS"))
        self.comboBox_role.setItemText(3, _translate("MainWindow", "SP"))

        self.btn_remove.setText(_translate("MainWindow", "Remove"))
        self.btn_update.setText(_translate("MainWindow", "Update"))
        self.btn_add.setText(_translate("MainWindow", "Add"))

        self.label_age.setText(_translate("MainWindow", "Age"))
        self.label_name.setText(_translate("MainWindow", "Name"))
        self.label_dept.setText(_translate("MainWindow", "Department"))
        self.label_role.setText(_translate("MainWindow", "Role"))

        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Emp_id"))

        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))

        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Age"))

        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Dept"))

        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Role"))

        self.label_name_app.setText(_translate("MainWindow", "Employee Management"))

        # DISPLAY_LIST_EMPLOYEE
        self.load_Data()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UiMainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

